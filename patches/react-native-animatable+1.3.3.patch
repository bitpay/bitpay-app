diff --git a/node_modules/react-native-animatable/createAnimatableComponent.js b/node_modules/react-native-animatable/createAnimatableComponent.js
index 2847e12..3a2b011 100644
--- a/node_modules/react-native-animatable/createAnimatableComponent.js
+++ b/node_modules/react-native-animatable/createAnimatableComponent.js
@@ -31,6 +31,9 @@ const INTERPOLATION_STYLE_PROPERTIES = [
   'textDecorationColor',
   // Image styles
   'tintColor',
+  // 'width', 'height'
+  'width',
+  'height'
 ];
 
 const ZERO_CLAMPED_STYLE_PROPERTIES = ['width', 'height'];
@@ -239,10 +242,7 @@ export default function createAnimatableComponent(WrappedComponent) {
       );
       Object.keys(currentTransitionValues).forEach(key => {
         const value = currentTransitionValues[key];
-        if (
-          INTERPOLATION_STYLE_PROPERTIES.indexOf(key) !== -1 ||
-          typeof value !== 'number'
-        ) {
+        if (INTERPOLATION_STYLE_PROPERTIES.indexOf(key) !== -1) {
           transitionValues[key] = new Animated.Value(0);
           styleValues[key] = value;
         } else {
@@ -459,30 +459,18 @@ export default function createAnimatableComponent(WrappedComponent) {
         if (!transitionValue) {
           transitionValue = new Animated.Value(0);
         }
-        const needsInterpolation =
-          INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 ||
-          typeof value !== 'number';
-        const needsZeroClamping =
-          ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
+        const needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1;
+        const needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
         if (needsInterpolation) {
           transitionValue.setValue(0);
           transitionStyle[property] = transitionValue.interpolate({
             inputRange: [0, 1],
             outputRange: [fromValue, toValue],
+            extrapolateLeft: needsZeroClamping ? 'clamp' : 'extend'
           });
           currentTransitionValues[property] = toValue;
           toValuesFlat[property] = 1;
         } else {
-          if (needsZeroClamping) {
-            transitionStyle[property] = transitionValue.interpolate({
-              inputRange: [0, 1],
-              outputRange: [0, 1],
-              extrapolateLeft: 'clamp',
-            });
-            currentTransitionValues[property] = toValue;
-          } else {
-            transitionStyle[property] = transitionValue;
-          }
           transitionValue.setValue(fromValue);
         }
       });
@@ -510,8 +498,7 @@ export default function createAnimatableComponent(WrappedComponent) {
       Object.keys(toValuesFlat).forEach(property => {
         const toValue = toValuesFlat[property];
         const needsInterpolation =
-          INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 ||
-          typeof value !== 'number';
+          INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1;
         const needsZeroClamping =
           ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
         const transitionStyle = this.state.transitionStyle[property];
